1
00:00:11,774 --> 00:00:13,131
Bonjour à tous !

2
00:00:13,231 --> 00:00:14,800
Cette semaine, nous allons parler

3
00:00:14,900 --> 00:00:16,100
de programmation asynchrone.

4
00:00:16,200 --> 00:00:19,000
C'est un sujet qui est assez innovant

5
00:00:19,100 --> 00:00:21,490
puisque ça met en oeuvre un paradigme

6
00:00:21,590 --> 00:00:23,500
de programmation qui est plutôt différent

7
00:00:23,600 --> 00:00:24,760
de ce à quoi on est habitué.

8
00:00:25,200 --> 00:00:27,700
C'est aussi un sujet qui devient de plus en plus

9
00:00:27,800 --> 00:00:29,530
prégnant puisque dans un monde qui est

10
00:00:29,630 --> 00:00:31,305
tourné complètement vers le réseau.

11
00:00:31,405 --> 00:00:33,290
Ce sont des types d'applications

12
00:00:33,390 --> 00:00:34,450
qui deviennent de plus en plus

13
00:00:34,550 --> 00:00:35,790
largement utilisées,

14
00:00:35,890 --> 00:00:37,360
et pour ceux qui connaissent,

15
00:00:37,460 --> 00:00:38,700
vous trouverez des similitudes

16
00:00:38,800 --> 00:00:40,270
avec ce qu'on peut trouver dans des langages

17
00:00:40,370 --> 00:00:42,640
comme C# et JavaScript,

18
00:00:42,740 --> 00:00:45,380
enfin toute une famille de langages.

19
00:00:45,480 --> 00:00:47,200
Donc pour revenir à Python, nous,

20
00:00:47,300 --> 00:00:48,120
on s'est donné aujourd'hui

21
00:00:48,220 --> 00:00:50,390
un budget de temps d'une semaine,

22
00:00:50,490 --> 00:00:51,803
donc on n'aura pas évidemment le temps

23
00:00:51,903 --> 00:00:52,784
d'aller très, très loin.

24
00:00:53,000 --> 00:00:56,560
Moi, mon objectif, c'est de faire en sorte

25
00:00:56,660 --> 00:00:58,400
que vous sachiez que ça existe,

26
00:00:58,500 --> 00:00:59,480
de vous donner les bases,

27
00:01:00,200 --> 00:01:02,080
de vous expliquer la magie qu'il y a là derrière

28
00:01:02,180 --> 00:01:03,745
de façon à ce que vous puissiez commencer

29
00:01:04,400 --> 00:01:07,700
à jouer avec ce paradigme qui est à nouveau

30
00:01:07,800 --> 00:01:09,210
très intéressant.

31
00:01:09,310 --> 00:01:11,704
Donc je m'adresse à un public qui est avancé,

32
00:01:11,804 --> 00:01:13,760
clairement, voire très avancé ;

33
00:01:15,000 --> 00:01:16,130
ça risque de demander

34
00:01:16,230 --> 00:01:17,490
un petit investissement de votre part

35
00:01:17,590 --> 00:01:19,770
mais si vous êtes de près ou de loin

36
00:01:19,870 --> 00:01:21,370
impliqués dans des domaines de réseaux,

37
00:01:21,470 --> 00:01:24,350
je pense que c'est très intéressant pour vous

38
00:01:24,450 --> 00:01:28,100
d'investiguer et de voir

39
00:01:28,200 --> 00:01:29,610
ce que vous pouvez tirer de ce paradigme.

40
00:01:31,860 --> 00:01:33,596
Dans cette première séquence,

41
00:01:33,696 --> 00:01:35,650
je vais expliciter ce que j'entends

42
00:01:35,750 --> 00:01:37,290
par programmation asynchrone.

43
00:01:37,390 --> 00:01:38,970
Donc pour commencer,

44
00:01:39,070 --> 00:01:41,410
on va faire une différence entre deux

45
00:01:41,510 --> 00:01:42,950
grandes familles d'applications.

46
00:01:43,050 --> 00:01:44,630
Vous avez les applications qui sont

47
00:01:44,730 --> 00:01:46,100
gourmandes en cycles,

48
00:01:46,200 --> 00:01:47,935
donc pensez à tout ce qui peut être

49
00:01:48,035 --> 00:01:49,390
calcul mathématique.

50
00:01:49,490 --> 00:01:51,500
Ce sont des applications dont

51
00:01:51,600 --> 00:01:53,330
la vitesse va être limitée par

52
00:01:53,430 --> 00:01:56,750
la disponibilité de cycles de calcul.

53
00:01:57,800 --> 00:01:59,450
Dans une deuxième famille d'applications,

54
00:01:59,550 --> 00:02:00,350
vous pouvez penser

55
00:02:00,700 --> 00:02:03,000
à toutes les applications qui au contraire

56
00:02:03,100 --> 00:02:05,450
ne vont pas être limitées par le processeur,

57
00:02:05,550 --> 00:02:07,800
mais par l'environnement extérieur,

58
00:02:07,900 --> 00:02:08,740
par la vitesse à laquelle

59
00:02:08,840 --> 00:02:10,700
les événements du type entrées/sorties

60
00:02:10,800 --> 00:02:12,835
sont susceptibles d'arriver à l'application.

61
00:02:12,935 --> 00:02:14,756
Donc c'est principalement tout ce qui

62
00:02:14,856 --> 00:02:16,530
peut être lié à la programmation réseau,

63
00:02:16,630 --> 00:02:19,840
aux interfaces utilisateur par exemple.

64
00:02:19,940 --> 00:02:21,010
Donc bien entendu,

65
00:02:21,110 --> 00:02:22,020
pour une application donnée,

66
00:02:22,120 --> 00:02:22,926
vous allez avoir des morceaux

67
00:02:23,026 --> 00:02:24,070
qui sont "CPU intensive"

68
00:02:24,170 --> 00:02:26,100
et d'autres qui sont "I/O intensive",

69
00:02:26,200 --> 00:02:27,050
mais en tout cas, nous,

70
00:02:27,150 --> 00:02:28,732
ce qui nous concerne cette semaine,

71
00:02:28,832 --> 00:02:31,000
on s'adresse uniquement

72
00:02:31,100 --> 00:02:32,130
à ce qui est "I/O intensive",

73
00:02:32,230 --> 00:02:34,310
qui est la partie pour laquelle

74
00:02:34,410 --> 00:02:36,625
la programmation asynchrone a été conçue.

75
00:02:38,230 --> 00:02:39,420
Donc pour bien illustrer ça,

76
00:02:39,520 --> 00:02:40,440
je vais prendre l'exemple,

77
00:02:40,540 --> 00:02:43,165
tout à fait typique, d'un robot

78
00:02:43,265 --> 00:02:44,590
- pensez au robot Google -

79
00:02:44,690 --> 00:02:46,560
dont le travail, ça va être d'aller chercher

80
00:02:46,660 --> 00:02:50,190
des pages web en grande quantité.

81
00:02:50,790 --> 00:02:52,730
Pour commencer, je vais prendre le cas

82
00:02:52,830 --> 00:02:55,285
hyper simple où je m'intéresse à une URL,

83
00:02:55,385 --> 00:02:57,480
et je simplifie au maximum,

84
00:02:57,580 --> 00:02:59,380
pour dire que le robot principalement

85
00:02:59,480 --> 00:03:01,000
il va envoyer une requête à un serveur,

86
00:03:01,100 --> 00:03:03,000
ce serveur va prendre un certain temps,

87
00:03:03,100 --> 00:03:03,900
va lui renvoyer une réponse.

88
00:03:04,000 --> 00:03:06,600
Donc le workflow, je vous l'indique

89
00:03:06,700 --> 00:03:08,440
de cette façon. À nouveau,

90
00:03:08,540 --> 00:03:10,040
c'est extrêmement simple ;

91
00:03:10,200 --> 00:03:11,050
le point qui est important

92
00:03:11,150 --> 00:03:13,518
c'est qu'entre les deux événements

93
00:03:13,618 --> 00:03:14,760
qui sont "j'envoie une requête" et

94
00:03:14,860 --> 00:03:16,247
"je reçois une requête",

95
00:03:16,347 --> 00:03:18,244
en gros, le processeur ne fait rien,

96
00:03:18,344 --> 00:03:22,700
et on va dire que c'est du temps perdu.

97
00:03:22,800 --> 00:03:26,100
Tant qu'il n'y a qu'une seule requête à traiter

98
00:03:26,200 --> 00:03:27,260
ça n'est pas un problème,

99
00:03:27,360 --> 00:03:28,760
mais évidemment, si j'ai plusieurs

100
00:03:28,860 --> 00:03:30,220
requêtes à faire, ce qui est bien entendu

101
00:03:30,320 --> 00:03:31,595
le cas dans la réalité,

102
00:03:31,695 --> 00:03:33,720
avec un paradigme de programmation

103
00:03:33,820 --> 00:03:35,450
traditionnelle, ce que je peux faire

104
00:03:35,550 --> 00:03:36,670
c'est de les faire en séquence et là,

105
00:03:36,770 --> 00:03:37,700
c'est encore pire puisque j'attends

106
00:03:37,800 --> 00:03:39,529
la première, j'attends la deuxième,

107
00:03:39,629 --> 00:03:41,292
donc si j'ai une centaine de milliers

108
00:03:41,392 --> 00:03:42,400
de requêtes à faire,

109
00:03:42,920 --> 00:03:44,865
je vais être extrêmement inefficace.

110
00:03:44,965 --> 00:03:47,356
Donc les outils dont je vais parler

111
00:03:47,456 --> 00:03:49,326
cette semaine adressent ce problème-là.

112
00:03:49,426 --> 00:03:53,138
On cherche à tirer le meilleur profit

113
00:03:53,238 --> 00:03:54,720
possible des cycles,

114
00:03:54,820 --> 00:03:56,200
mais on cherche aussi à le faire

115
00:03:56,300 --> 00:03:58,230
d'une manière qui ne défigure pas

116
00:03:58,330 --> 00:03:59,900
la logique qui est derrière.

117
00:04:00,000 --> 00:04:01,020
Ce qu'on a envie de faire, c'est d'écrire

118
00:04:01,120 --> 00:04:02,706
un code qui dit "moi, ce que je veux faire,

119
00:04:02,806 --> 00:04:03,790
c'est envoyer une requête,

120
00:04:03,890 --> 00:04:05,160
attendre qu'elle revienne

121
00:04:05,260 --> 00:04:06,664
et en faire quelque chose",

122
00:04:06,764 --> 00:04:10,462
sans avoir à défigurer le code,

123
00:04:10,562 --> 00:04:11,680
à changer l'architecture

124
00:04:11,780 --> 00:04:13,446
ou à modifier la structure du code.

125
00:04:13,546 --> 00:04:15,240
Donc c'est ça que nous allons voir

126
00:04:15,340 --> 00:04:16,520
dans la suite.

127
00:04:18,000 --> 00:04:18,800
Donc pour commencer,

128
00:04:18,900 --> 00:04:19,800
je voudrais faire quelques rappels

129
00:04:19,900 --> 00:04:21,600
sur le fonctionnement des ordinateurs

130
00:04:21,700 --> 00:04:23,700
et des systèmes d'exploitation,

131
00:04:23,800 --> 00:04:25,485
qu'on appelle operating systems en anglais.

132
00:04:25,585 --> 00:04:29,600
Donc la première abstraction

133
00:04:29,700 --> 00:04:31,785
qu'offre un operating system

134
00:04:31,885 --> 00:04:32,750
pour les applications,

135
00:04:32,850 --> 00:04:33,300
c'est ce qu'on appelle

136
00:04:33,400 --> 00:04:35,000
un process, un processus.

137
00:04:36,220 --> 00:04:37,892
Donc l'idée, c'est assez simple,

138
00:04:37,992 --> 00:04:39,360
on vous offre un mécanisme

139
00:04:39,460 --> 00:04:40,800
d'isolation complète ;

140
00:04:40,900 --> 00:04:43,050
vous allez pouvoir mettre dans un process

141
00:04:43,150 --> 00:04:44,560
naturellement un morceau de code,

142
00:04:45,540 --> 00:04:47,322
une zone de mémoire

143
00:04:47,422 --> 00:04:48,830
qui est une mémoire virtuelle

144
00:04:48,930 --> 00:04:50,130
et qui n'est pas du tout partagée

145
00:04:50,230 --> 00:04:51,060
avec les autres processus.

146
00:04:51,150 --> 00:04:52,585
C'est le principe.

147
00:04:52,685 --> 00:04:54,030
Et puis bien entendu,

148
00:04:55,650 --> 00:04:57,380
à titre accessoire, il y a

149
00:04:57,480 --> 00:04:58,680
ce qu'on appelle une pile,

150
00:04:58,780 --> 00:05:02,150
c'est-à-dire que c'est là où on va garder

151
00:05:02,250 --> 00:05:03,760
la trace des différents appels de fonction,

152
00:05:03,860 --> 00:05:05,540
et puis un pointeur qui dit

153
00:05:05,640 --> 00:05:07,650
où on en est dans le code.

154
00:05:08,810 --> 00:05:11,000
Donc, pour revenir à mon problème de robot,

155
00:05:11,100 --> 00:05:12,790
je pourrais penser à utiliser les process

156
00:05:12,890 --> 00:05:14,100
en me disant: je vais créer

157
00:05:14,200 --> 00:05:15,885
un processus par requête.

158
00:05:16,000 --> 00:05:17,700
Effectivement, sur le plan du principe

159
00:05:17,800 --> 00:05:18,300
ça fonctionne.

160
00:05:19,400 --> 00:05:20,580
J'ai du parallélisme,

161
00:05:20,680 --> 00:05:22,200
je vais tirer profit

162
00:05:22,300 --> 00:05:24,970
du processeur de manière optimale.

163
00:05:25,070 --> 00:05:26,220
C'est l'operating system

164
00:05:26,320 --> 00:05:27,568
qui va passer la main

165
00:05:27,668 --> 00:05:28,420
d'un process à l'autre.

166
00:05:28,520 --> 00:05:30,688
Je vais régler le problème que j'indiquais

167
00:05:30,788 --> 00:05:32,739
de tirer profit de mes cycles.

168
00:05:32,839 --> 00:05:34,750
Par contre, j'ai un gros problème,

169
00:05:34,850 --> 00:05:36,400
c'est que d'abord j'ai trop d'isolation

170
00:05:36,500 --> 00:05:37,450
dans le sens où quand j'ai

171
00:05:37,550 --> 00:05:38,900
plein de requêtes à faire,

172
00:05:39,000 --> 00:05:40,100
la plupart du temps, il y a une logique:

173
00:05:40,200 --> 00:05:41,480
je vais chercher une première page,

174
00:05:41,580 --> 00:05:42,515
ça va me donner des URL

175
00:05:42,615 --> 00:05:43,480
que je vais chercher ensuite,

176
00:05:43,580 --> 00:05:45,080
donc j'ai besoin que les différents

177
00:05:46,150 --> 00:05:47,320
morceaux de mon application

178
00:05:47,420 --> 00:05:48,610
se causent, donc l'isolation

179
00:05:48,710 --> 00:05:49,530
dans ce cas précis,

180
00:05:49,630 --> 00:05:51,270
ce n'est pas du tout favorable.

181
00:05:52,150 --> 00:05:53,680
Un deuxième problème, c'est que

182
00:05:53,780 --> 00:05:56,660
ce n'est pas du tout un paradigme

183
00:05:56,760 --> 00:05:58,100
qui va me permettre de passer à l'échelle,

184
00:05:58,200 --> 00:05:59,200
je peux espérer faire

185
00:05:59,300 --> 00:06:00,410
une dizaine, une centaine peut-être

186
00:06:00,510 --> 00:06:01,625
de requêtes en parallèle.

187
00:06:01,725 --> 00:06:04,480
Bref, ce n'est pas bon.

188
00:06:05,000 --> 00:06:08,470
Donc, ce qui s'est passé ensuite, c'est que

189
00:06:08,570 --> 00:06:12,560
avec l'arrivée de machines multi-processeurs,

190
00:06:12,660 --> 00:06:14,650
multi-core, on s'est dit

191
00:06:14,750 --> 00:06:16,540
- là, c'était aussi plutôt pour

192
00:06:16,640 --> 00:06:17,850
les CPU intensive, on va dire

193
00:06:17,950 --> 00:06:19,070
on va inventer un autre truc,

194
00:06:19,170 --> 00:06:20,500
on va dire qu'un process, il n'y a pas

195
00:06:20,600 --> 00:06:21,750
qu'un seul thread, il y en a plusieurs.

196
00:06:21,850 --> 00:06:24,020
Donc, l'idée est la suivante, c'est très simple,

197
00:06:24,120 --> 00:06:26,650
on reste dans un environnement isolé,

198
00:06:26,750 --> 00:06:28,010
la mémoire est toujours isolée,

199
00:06:28,110 --> 00:06:31,100
mais mon process va pouvoir avoir en gros

200
00:06:31,200 --> 00:06:33,600
plusieurs threads, donc

201
00:06:33,700 --> 00:06:35,780
plusieurs tâches en même temps.

202
00:06:36,420 --> 00:06:39,835
Alors, ça, c'est un paradigme qui est

203
00:06:39,935 --> 00:06:42,488
un petit peu plus intéressant pour nous,

204
00:06:42,588 --> 00:06:45,856
je signale que c'est disponible en Python,

205
00:06:45,956 --> 00:06:47,200
c'est largement utilisé, il y a

206
00:06:47,300 --> 00:06:49,500
un module exprès qui s'appelle threading.

207
00:06:50,800 --> 00:06:52,700
Par contre, c'est un système qui est d'une

208
00:06:52,800 --> 00:06:54,015
utilisation un petit peu plus délicate,

209
00:06:54,115 --> 00:06:56,100
dont je vous dirai un mot tout de suite.

210
00:06:56,200 --> 00:06:57,740
En gros, ça introduit des problèmes

211
00:06:57,840 --> 00:06:59,510
de synchronisation entre les threads

212
00:06:59,610 --> 00:07:01,100
et de sections critiques

213
00:07:01,200 --> 00:07:02,300
- je vais en dire un mot.

214
00:07:04,450 --> 00:07:06,672
En terme de passage à l'échelle,

215
00:07:06,772 --> 00:07:09,000
c'est plus favorable pour nous,

216
00:07:09,100 --> 00:07:10,540
on peut imaginer passer peut-être

217
00:07:10,640 --> 00:07:12,250
à l'échelle de plusieurs milliers,

218
00:07:13,110 --> 00:07:15,000
mais on va voir que

219
00:07:15,100 --> 00:07:16,780
ce n'est pas forcément suffisant

220
00:07:16,880 --> 00:07:18,460
et avec les technologies

221
00:07:18,560 --> 00:07:19,110
dont je vais vous parler,

222
00:07:19,210 --> 00:07:21,725
on va pouvoir faire beaucoup mieux que ça.

223
00:07:23,100 --> 00:07:24,412
Donc pour bien voir le problème

224
00:07:24,512 --> 00:07:25,510
qu'on a avec les threads,

225
00:07:26,000 --> 00:07:27,110
si vous imaginez maintenant

226
00:07:27,210 --> 00:07:28,230
que j'implémente mon robot de

227
00:07:28,330 --> 00:07:30,200
deux requêtes avec deux threads différents,

228
00:07:30,300 --> 00:07:33,180
je vais bien avoir les deux phases

229
00:07:33,280 --> 00:07:36,290
qui consistent à envoyer les requêtes

230
00:07:36,390 --> 00:07:37,520
à mes deux serveurs

231
00:07:37,620 --> 00:07:39,400
- je vais les voir dans ma tête,

232
00:07:39,500 --> 00:07:40,000
conceptuellement, elles sont

233
00:07:40,100 --> 00:07:40,800
en même temps.

234
00:07:40,900 --> 00:07:42,810
En fait, ce qui ce passe, c'est que

235
00:07:44,000 --> 00:07:45,170
ça n'est pas moi qui ai le contrôle

236
00:07:45,270 --> 00:07:47,350
sur les moments où l'on va passer la main

237
00:07:47,450 --> 00:07:48,600
au premier ou au deuxième.

238
00:07:48,700 --> 00:07:52,600
En fait, cet arbitrage-là, cette orchestration-là,

239
00:07:52,700 --> 00:07:54,460
ils sont faits par le scheduler de threads,

240
00:07:54,560 --> 00:07:56,180
sur lequel je n'ai absolument pas la main

241
00:07:56,280 --> 00:07:58,200
et qui n'a pas de connaissance a priori

242
00:07:58,300 --> 00:07:59,560
de la logique de mon programme.

243
00:07:59,660 --> 00:08:00,900
Donc c'est surtout ça

244
00:08:01,000 --> 00:08:03,050
qui va nous permettre

245
00:08:03,150 --> 00:08:05,970
d'améliorer la lisibilité de notre code,

246
00:08:06,370 --> 00:08:08,060
c'est que, avec les paradigmes

247
00:08:08,160 --> 00:08:09,650
que je vais vous présenter,

248
00:08:09,750 --> 00:08:10,950
vous aurez le contrôle

249
00:08:11,050 --> 00:08:12,510
de à quel moment exactement

250
00:08:12,610 --> 00:08:15,710
vous acceptez de redonner la main,

251
00:08:15,810 --> 00:08:16,700
ou à quel moment

252
00:08:16,800 --> 00:08:17,890
vous voulez absolument la garder

253
00:08:17,990 --> 00:08:18,710
parce que c'est important

254
00:08:18,810 --> 00:08:20,620
en terme de section critique par exemple.

255
00:08:21,600 --> 00:08:22,500
Bon, maintenant,

256
00:08:22,600 --> 00:08:23,790
pour changer de sujet complètement,

257
00:08:25,000 --> 00:08:25,890
pour se placer maintenant

258
00:08:25,990 --> 00:08:27,040
d'un point de vue qui est

259
00:08:27,140 --> 00:08:28,360
beaucoup plus applicatif,

260
00:08:28,460 --> 00:08:30,680
il y a dans un certain nombre de langages

261
00:08:30,780 --> 00:08:31,370
et de paradigmes,

262
00:08:31,470 --> 00:08:32,660
une autre approche complètement,

263
00:08:32,860 --> 00:08:34,430
qui s'appelle les "callbacks".

264
00:08:34,530 --> 00:08:37,240
Alors les callbacks, c'est l'idée qu'on va

265
00:08:37,340 --> 00:08:38,670
associer à un événement

266
00:08:38,770 --> 00:08:40,610
une fonction à exécuter.

267
00:08:40,710 --> 00:08:42,420
Donc c'est relativement simple

268
00:08:42,520 --> 00:08:43,850
sur le plan du concept ;

269
00:08:43,950 --> 00:08:44,820
donc on n'est plus du tout

270
00:08:44,920 --> 00:08:45,920
du côté de l'operating system,

271
00:08:46,020 --> 00:08:48,000
on est vraiment du côté applicatif.

272
00:08:49,100 --> 00:08:52,130
Par contre, ça a un gros souci, les callbacks,

273
00:08:52,230 --> 00:08:53,320
c'est que ça vous amène

274
00:08:53,420 --> 00:08:55,690
à couper votre code en tout petits morceaux,

275
00:08:55,790 --> 00:08:56,740
je vous en montrerai un exemple

276
00:08:56,840 --> 00:08:57,540
tout à l'heure,

277
00:08:57,640 --> 00:08:59,000
et ça induit une logique

278
00:08:59,100 --> 00:09:00,540
qui devient difficile à suivre.

279
00:09:01,490 --> 00:09:02,670
Alors, asyncio,

280
00:09:02,770 --> 00:09:04,900
le paradigme sur lequel on va parler

281
00:09:05,000 --> 00:09:05,770
toute cette semaine,

282
00:09:06,200 --> 00:09:08,200
se fixe en gros comme objectif

283
00:09:08,300 --> 00:09:12,440
d'apporter une solution alternative

284
00:09:12,540 --> 00:09:14,795
aux process, aux threads et aux callbacks.

285
00:09:14,895 --> 00:09:17,700
Donc l'idée, ça va être de construire

286
00:09:17,800 --> 00:09:19,730
cette fois-ci la notion de coroutines

287
00:09:19,830 --> 00:09:20,990
qui s'exécutent en parallèle,

288
00:09:21,090 --> 00:09:21,610
donc jusque-là,

289
00:09:21,710 --> 00:09:22,935
ça ressemble un peu à un thread,

290
00:09:23,035 --> 00:09:26,510
sauf que ce sont des choses qui vont

291
00:09:26,610 --> 00:09:28,905
s'exécuter dans un seul thread de la machine

292
00:09:29,005 --> 00:09:32,630
et l'orchestration de ces différents

293
00:09:32,730 --> 00:09:35,210
pseudo-threads ou des threads applicatifs,

294
00:09:35,310 --> 00:09:35,720
on pourrait les appeler ainsi,

295
00:09:35,820 --> 00:09:38,880
elle est faite avec la connaissance du code

296
00:09:38,980 --> 00:09:41,330
et c'est ce qui va nous permettre

297
00:09:41,430 --> 00:09:43,572
d'avoir un contrôle très fin

298
00:09:43,672 --> 00:09:45,610
sur la commutation entre les différents

299
00:09:45,710 --> 00:09:47,020
morceaux de notre programme.

300
00:09:47,500 --> 00:09:48,700
La conséquence de ça, c'est qu'on va

301
00:09:48,800 --> 00:09:49,740
pouvoir un code qui est

302
00:09:49,840 --> 00:09:51,050
beaucoup plus lisible,

303
00:09:51,150 --> 00:09:52,240
- à nouveau, je vais vous en donner

304
00:09:52,340 --> 00:09:53,840
un exemple tout de suite -

305
00:09:53,940 --> 00:09:55,400
en gardant le contrôle sur

306
00:09:55,500 --> 00:09:56,520
les changements de contexte

307
00:09:56,620 --> 00:09:58,480
sans avoir à saucissonner

308
00:09:58,580 --> 00:10:00,130
notre code en morceaux,

309
00:10:00,230 --> 00:10:02,630
et en plus, cerise sur le gâteau,

310
00:10:02,730 --> 00:10:04,145
ça va nous permettre

311
00:10:04,245 --> 00:10:07,610
d'améliorer encore plus la scalabilité,

312
00:10:07,710 --> 00:10:09,720
on va pouvoir envisager d'héberger

313
00:10:09,820 --> 00:10:10,920
des dizaines de milliers,

314
00:10:11,020 --> 00:10:12,110
voire des centaines de milliers,

315
00:10:12,210 --> 00:10:13,690
de requêtes en parallèle.

316
00:10:14,000 --> 00:10:16,720
Donc pour bien matérialiser cela

317
00:10:16,820 --> 00:10:19,650
sur un exemple assez simple,

318
00:10:19,750 --> 00:10:22,300
je vous montre le code

319
00:10:22,400 --> 00:10:25,160
en version callback à gauche,

320
00:10:25,260 --> 00:10:27,500
d'un protocole qui s'appelle

321
00:10:27,600 --> 00:10:28,250
le protocole ping-pong,

322
00:10:28,350 --> 00:10:30,190
qui est très classique dans les co-réseaux.

323
00:10:30,290 --> 00:10:31,660
Le protocole ping-pong, c'est très simple,

324
00:10:31,760 --> 00:10:33,870
le client envoie un message au serveur

325
00:10:33,970 --> 00:10:35,460
qui lui renvoie le message.

326
00:10:35,560 --> 00:10:36,680
C'est vraiment très simple.

327
00:10:37,000 --> 00:10:39,730
Donc à droite vous avez la version,

328
00:10:39,830 --> 00:10:41,400
alors dans un langage imaginaire,

329
00:10:41,500 --> 00:10:42,430
ça ressemble un peu à du Python,

330
00:10:42,530 --> 00:10:45,870
mais en gros ce serait ça que vous écririez

331
00:10:45,970 --> 00:10:46,700
sous forme de coroutine,

332
00:10:46,800 --> 00:10:49,900
vous dites: je suis le serveur,

333
00:10:50,000 --> 00:10:52,080
j'attends ce que m'envoie le client,

334
00:10:52,180 --> 00:10:54,180
je le lui renvoie,

335
00:10:54,280 --> 00:10:55,960
je vide mon buffer,

336
00:10:56,060 --> 00:10:57,860
et je ferme la connexion.

337
00:10:58,320 --> 00:11:00,460
Donc là on a la logique

338
00:11:00,560 --> 00:11:02,720
de ce petit protocole

339
00:11:02,820 --> 00:11:04,360
qui est tout à fait lisible.

340
00:11:04,460 --> 00:11:05,970
Si vous regardez à gauche

341
00:11:06,070 --> 00:11:07,000
la même chose écrite

342
00:11:07,100 --> 00:11:08,765
dans un langage basé callback,

343
00:11:09,860 --> 00:11:11,490
ça ressemble à du JavaScript clairement,

344
00:11:11,590 --> 00:11:13,270
bon, vous voyez qu'on passe son temps

345
00:11:13,370 --> 00:11:17,820
à dire: sur un événement, j'arme une fonction

346
00:11:17,920 --> 00:11:19,400
qui elle-même va de nouveau armer

347
00:11:19,500 --> 00:11:20,325
un événement sur une fonction...

348
00:11:20,425 --> 00:11:21,570
C'est ce qu'on appelle le "callback hell"

349
00:11:21,670 --> 00:11:23,280
dans la littérature.

350
00:11:23,855 --> 00:11:25,960
C'est très pratique parce que ça permet

351
00:11:26,060 --> 00:11:27,275
notamment dans les applications web,

352
00:11:27,375 --> 00:11:29,184
de faire des applis qui sont très réactives,

353
00:11:29,284 --> 00:11:31,200
donc ça donne de très bonnes performances

354
00:11:31,300 --> 00:11:32,940
mais par contre c'est vraiment au prix d'une...

355
00:11:34,200 --> 00:11:35,740
on défigure complètement le code

356
00:11:35,840 --> 00:11:38,420
et ce n'est pas du tout souhaitable.

357
00:11:39,600 --> 00:11:41,453
Donc, avec asyncio pour conclure,

358
00:11:41,553 --> 00:11:44,650
on va arriver à faire notre petit exercice

359
00:11:44,750 --> 00:11:48,220
en ayant une utilisation optimale du code,

360
00:11:48,560 --> 00:11:50,886
une utilisation optimale des cycles, pardon,

361
00:11:50,986 --> 00:11:52,696
mais avec un code qui est

362
00:11:52,796 --> 00:11:54,456
complètement lisible

363
00:11:54,556 --> 00:11:56,200
et en plus avec un paradigme

364
00:11:56,300 --> 00:11:58,020
qui est complètement "scalable".

365
00:11:58,500 --> 00:12:00,450
Donc, c'est surtout de ça dont on va parler

366
00:12:00,550 --> 00:12:01,620
dans le reste de la semaine.

367
00:12:01,720 --> 00:12:02,900
À bientôt !

