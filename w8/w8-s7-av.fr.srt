1
00:00:05,436 --> 00:00:07,030
Dans la vidéo précédente, nous avons vu

2
00:00:07,130 --> 00:00:08,951
comment ajouter des traitements

3
00:00:09,051 --> 00:00:09,730
dans une tâche

4
00:00:09,830 --> 00:00:12,690
et déclencher la boucle d'événements

5
00:00:12,790 --> 00:00:13,672
pour lui faire faire des choses.

6
00:00:13,772 --> 00:00:15,226
Donc, dans celle-ci, nous allons expliciter

7
00:00:15,326 --> 00:00:16,234
la notion de tâche

8
00:00:16,334 --> 00:00:19,382
qui est, on va dire, l'interface

9
00:00:19,482 --> 00:00:21,060
entre l'utilisateur et la boucle.

10
00:00:22,389 --> 00:00:23,901
La fonction ensure_future

11
00:00:24,001 --> 00:00:25,313
que nous avons explicitée

12
00:00:25,413 --> 00:00:26,264
dans la dernière vidéo

13
00:00:26,364 --> 00:00:28,702
retourne un objet de type task.

14
00:00:28,802 --> 00:00:30,472
Un objet de type task

15
00:00:30,572 --> 00:00:31,406
ça sert à quoi ?

16
00:00:31,506 --> 00:00:34,086
Ça sert essentiellement à connaître l'état

17
00:00:34,186 --> 00:00:35,009
de son traitement,

18
00:00:35,109 --> 00:00:35,993
savoir s'il est terminé ou pas,

19
00:00:36,093 --> 00:00:39,159
et à mémoriser, dans le cas où c'est terminé,

20
00:00:39,259 --> 00:00:40,153
est-ce qu'il s'est bien terminé

21
00:00:40,253 --> 00:00:41,333
ou est-ce que, au contraire,

22
00:00:41,433 --> 00:00:43,302
il a levé une exception par exemple.

23
00:00:43,931 --> 00:00:45,299
Donc je vais vous montrer tout ça

24
00:00:45,399 --> 00:00:46,664
sur une petite animation.

25
00:00:48,311 --> 00:00:50,317
Je me mets dans un scénario d'une boucle

26
00:00:50,417 --> 00:00:53,235
dans laquelle je vais créer trois tâches.

27
00:00:53,335 --> 00:00:55,115
Je vais appeler ensure_future

28
00:00:55,215 --> 00:00:56,355
qui va m'envoyer un objet task,

29
00:00:56,455 --> 00:00:57,295
je vais le faire trois fois.

30
00:00:58,705 --> 00:01:00,760
Je rentre dans run_forever.

31
00:01:00,860 --> 00:01:03,401
La boucle, comme on l'a déjà bien compris

32
00:01:03,501 --> 00:01:05,000
va sélectionner une tâche,

33
00:01:05,100 --> 00:01:07,818
va la faire avancer jusqu'au prochain yield,

34
00:01:07,918 --> 00:01:09,372
va sélectionner une autre tâche,

35
00:01:09,472 --> 00:01:10,993
va la faire avancer jusqu'au prochain yield,

36
00:01:11,093 --> 00:01:12,760
et caetera ; on a bien compris cette logique.

37
00:01:13,549 --> 00:01:15,252
Et puis, je me mets maintenant

38
00:01:15,352 --> 00:01:17,246
dans la situation où une de ces tâches va

39
00:01:17,346 --> 00:01:18,452
retourner normalement.

40
00:01:18,552 --> 00:01:19,497
Donc c'est une coroutine ;

41
00:01:19,597 --> 00:01:21,432
la coroutine a fini son travail,

42
00:01:21,532 --> 00:01:22,623
elle fait return quelque chose

43
00:01:22,723 --> 00:01:23,715
donc qu'est-ce qui va se passer ?

44
00:01:24,767 --> 00:01:28,125
je vais mémoriser le résultat de ce retour

45
00:01:28,225 --> 00:01:29,395
dans l'objet task ;

46
00:01:29,495 --> 00:01:31,176
je pourrai ensuite y accéder

47
00:01:31,276 --> 00:01:32,640
par la méthode result().

48
00:01:33,501 --> 00:01:34,819
Et ensuite, ce que va faire la boucle,

49
00:01:34,919 --> 00:01:36,544
c'est de marquer cette tâche

50
00:01:36,644 --> 00:01:37,330
comme étant terminée ;

51
00:01:37,430 --> 00:01:38,601
du coup, elle n'a plus besoin de s'en occuper ;

52
00:01:39,116 --> 00:01:40,378
elle passe à une autre tâche.

53
00:01:40,951 --> 00:01:42,063
Et maintenant, je me mets dans le cas où

54
00:01:42,163 --> 00:01:44,007
cette autre tâche lève une exception,

55
00:01:44,876 --> 00:01:47,306
et je me mets dans le cas aussi où

56
00:01:47,406 --> 00:01:48,523
cette exception, elle a été attrapée

57
00:01:48,623 --> 00:01:51,033
dans la pile dont on part,

58
00:01:51,133 --> 00:01:52,894
c'est-à-dire que, en regardant

59
00:01:52,994 --> 00:01:54,539
dans les différents frames de la pile,

60
00:01:54,639 --> 00:01:55,860
je tombe sur une exception try

61
00:01:55,960 --> 00:01:58,537
qui effectivement capture l'exception ;

62
00:01:58,637 --> 00:01:59,191
dans ce cas-là,

63
00:01:59,291 --> 00:02:01,919
de manière tout à fait normale,

64
00:02:02,019 --> 00:02:03,081
on va continuer l'exception

65
00:02:03,181 --> 00:02:04,159
comme s'il ne s'était rien passé,

66
00:02:04,259 --> 00:02:07,814
l'exception ne va pas aller jusqu'à la boucle,

67
00:02:07,914 --> 00:02:08,798
la boucle ne va même pas voir

68
00:02:08,898 --> 00:02:09,565
qu'il y a une exception ;

69
00:02:10,174 --> 00:02:11,385
je vais continuer mon traitement

70
00:02:11,485 --> 00:02:12,015
normalement,

71
00:02:12,115 --> 00:02:13,595
je vais passer à une autre tâche ;

72
00:02:13,695 --> 00:02:15,195
et maintenant, je me mets

73
00:02:15,295 --> 00:02:17,139
dans le cas de figure où cette autre tâche

74
00:02:17,239 --> 00:02:19,165
lève à son tour une exception

75
00:02:19,265 --> 00:02:20,765
mais cette fois-ci,

76
00:02:20,601 --> 00:02:23,433
dans aucun des frames de la pile

77
00:02:23,533 --> 00:02:26,974
de cette tâche, il n'y a de clause try

78
00:02:27,074 --> 00:02:29,564
qui attrape l'exception.

79
00:02:30,058 --> 00:02:31,249
Donc, ce qu'on va faire,

80
00:02:31,349 --> 00:02:33,852
c'est de mémoriser cette exception

81
00:02:33,952 --> 00:02:34,946
dans l'objet task,

82
00:02:35,046 --> 00:02:35,754
comme on l'a fait tout à l'heure,

83
00:02:35,854 --> 00:02:37,565
simplement on le met dans un champ

84
00:02:37,665 --> 00:02:38,515
qui s'appelle exception.

85
00:02:38,615 --> 00:02:40,409
De nouveau, cette tâche,

86
00:02:40,509 --> 00:02:43,623
on la marque comme étant terminée,

87
00:02:43,723 --> 00:02:44,823
on n'a plus besoin de s'en occuper,

88
00:02:44,923 --> 00:02:46,154
et on se retrouve uniquement

89
00:02:46,254 --> 00:02:47,143
avec une tâche.

90
00:02:48,180 --> 00:02:49,899
Donc vous avez bien compris que la tâche,

91
00:02:49,999 --> 00:02:51,257
ça va être l'objet qui va permettre

92
00:02:51,357 --> 00:02:53,792
de communiquer entre l'utilisateur

93
00:02:53,892 --> 00:02:54,759
et la boucle d'événements.

94
00:02:55,573 --> 00:02:57,682
J'ai bien insisté dans l'animation

95
00:02:57,782 --> 00:02:59,453
sur la notion d'exception, et en particulier

96
00:02:59,332 --> 00:03:00,846
dans ce cas pathologique où l'exception

97
00:03:00,946 --> 00:03:02,111
n'est pas attrapée nativement

98
00:03:02,211 --> 00:03:03,716
dans le code asynchrone,

99
00:03:04,221 --> 00:03:07,786
parce que c'est une source de souci,

100
00:03:07,886 --> 00:03:11,418
évidemment, si une de vos tâches

101
00:03:11,518 --> 00:03:13,621
lève une exception et que personne

102
00:03:13,721 --> 00:03:15,567
ne va la lire, ça veut dire que

103
00:03:15,667 --> 00:03:17,752
très possiblement, il y a eu quelque chose

104
00:03:17,852 --> 00:03:20,049
de vraiment pas bien qui s'est passé.

105
00:03:20,845 --> 00:03:23,615
C'est une source de bug assez importante ;

106
00:03:23,715 --> 00:03:25,077
c'est même, je devrais dire,

107
00:03:25,177 --> 00:03:26,252
en matière de développement,

108
00:03:26,352 --> 00:03:28,307
quand vous allez commencer à écrire

109
00:03:28,407 --> 00:03:29,640
du code un petit peu sérieux,

110
00:03:29,740 --> 00:03:31,560
c'est très probablement le premier

111
00:03:31,660 --> 00:03:32,727
souci que vous allez avoir.

112
00:03:33,264 --> 00:03:36,472
Vous écrivez du code, et ça se passe mal,

113
00:03:36,572 --> 00:03:37,590
et vous n'avez aucun retour.

114
00:03:37,690 --> 00:03:41,440
Donc il faut bien apprendre à aller explorer

115
00:03:41,540 --> 00:03:43,607
les différents composants des tâches.

116
00:03:43,707 --> 00:03:45,622
Donc, les bonnes pratiques, c'est

117
00:03:45,971 --> 00:03:48,377
autant que possible d'attraper les exceptions

118
00:03:48,477 --> 00:03:49,855
dans le corps du code asynchrone,

119
00:03:49,955 --> 00:03:51,230
c'est quand même le plus simple,

120
00:03:51,330 --> 00:03:53,961
en règle générale, on s'efforce

121
00:03:54,061 --> 00:03:55,182
de faire en sorte que les exceptions

122
00:03:55,282 --> 00:03:57,758
n'arrivent pas jusqu'au fond de la pile

123
00:03:57,858 --> 00:03:58,941
de la coroutine.

124
00:03:59,810 --> 00:04:01,224
Maintenant, dans le cas,

125
00:04:01,324 --> 00:04:02,863
qui peut toujours arriver,

126
00:04:02,963 --> 00:04:05,041
où il y a une exception

127
00:04:05,141 --> 00:04:05,838
que vous n'avez pas prévue,

128
00:04:05,938 --> 00:04:07,609
il est quand même assez important

129
00:04:07,709 --> 00:04:08,769
en gros, ce que je cherche à dire

130
00:04:08,869 --> 00:04:09,836
c'est si vous avez un code

131
00:04:09,936 --> 00:04:11,233
qui arrive à maturité,

132
00:04:11,333 --> 00:04:13,730
il y a de très fortes chances

133
00:04:13,830 --> 00:04:14,919
pour que vous soyez amenés à écrire

134
00:04:16,154 --> 00:04:18,571
un code de type robustification

135
00:04:18,671 --> 00:04:20,377
qui va se charger d'aller bien explorer

136
00:04:20,477 --> 00:04:21,656
le contenu de toutes les tâches

137
00:04:21,756 --> 00:04:23,795
et bien vérifier qu'aucune exception

138
00:04:23,895 --> 00:04:25,147
n'a été levée.

139
00:04:25,880 --> 00:04:27,507
Alors, pour faire ça, il y a un certain nombre

140
00:04:27,607 --> 00:04:31,959
de fonctionnalités dans la classe Task ;

141
00:04:32,059 --> 00:04:33,646
donc là, il s'agit de deux méthodes de classe

142
00:04:33,746 --> 00:04:36,232
vous avez all_tasks et current_task.

143
00:04:36,332 --> 00:04:38,876
C'est surtout all_tasks qui nous intéresse,

144
00:04:38,976 --> 00:04:40,208
donc je vais vous montrer un petit peu

145
00:04:40,308 --> 00:04:42,462
comment ça s'utilise ;

146
00:04:42,562 --> 00:04:45,712
je crée une coroutine foo,

147
00:04:45,812 --> 00:04:48,372
je l'ajoute dans ma boucle sans fin.

148
00:04:48,472 --> 00:04:50,300
Je vous montre que le résultat

149
00:04:51,237 --> 00:04:52,567
est un objet de type task.

150
00:04:54,374 --> 00:04:55,886
Je vous montre également que je peux

151
00:04:55,986 --> 00:04:58,937
maintenant demander quelle est la liste

152
00:04:59,037 --> 00:05:01,256
de toutes les tâches qui sont dans la boucle,

153
00:05:01,356 --> 00:05:02,979
alors là, de nouveau, il y a cette notion

154
00:05:03,079 --> 00:05:05,893
de boucle implicite qui est utilisée ici ;

155
00:05:06,697 --> 00:05:07,919
je n'ai pas été obligé de préciser

156
00:05:08,019 --> 00:05:10,102
à quelle boucle je m'intéresse

157
00:05:10,202 --> 00:05:11,475
parce que c'est la boucle par défaut.

158
00:05:12,551 --> 00:05:15,310
La méthode all_tasks me renvoie

159
00:05:15,410 --> 00:05:16,339
un ensemble,

160
00:05:16,439 --> 00:05:17,427
ce n'est pas une liste, c'est un ensemble ;

161
00:05:17,527 --> 00:05:20,290
c'est une façon normale de voir les choses

162
00:05:20,390 --> 00:05:22,103
puisqu'il n'y aurait aucune raison de mettre

163
00:05:22,203 --> 00:05:24,226
deux fois le même objet.

164
00:05:25,472 --> 00:05:29,192
Je peux vérifier que l'objet task que j'ai créé

165
00:05:29,292 --> 00:05:31,749
par ensure_future fait bien partie des tâches

166
00:05:31,849 --> 00:05:35,721
et, évidemment, si j'essaie de regarder

167
00:05:35,821 --> 00:05:37,482
dans ce contexte-là,

168
00:05:37,582 --> 00:05:38,583
quelle est la tâche courante,

169
00:05:38,683 --> 00:05:39,635
il n'y en a pas

170
00:05:39,735 --> 00:05:40,842
puisque je ne suis pas dans une boucle,

171
00:05:40,942 --> 00:05:42,969
il n'y a pas de tâche courante.

172
00:05:44,242 --> 00:05:46,141
Pour finir, je vous signale l'existence

173
00:05:46,241 --> 00:05:48,324
d'une méthode cancel sur les tasks ;

174
00:05:48,424 --> 00:05:50,905
c'est une méthode qu'on n'a pas forcément

175
00:05:51,005 --> 00:05:52,587
besoin d'utiliser quand on commence, mais

176
00:05:52,687 --> 00:05:54,071
dès qu'on fait du code un petit peu sérieux,

177
00:05:55,102 --> 00:05:57,093
ça fait partie de la vie de tous les jours

178
00:05:57,193 --> 00:05:59,164
que d'avoir à annuler des tâches,

179
00:05:59,264 --> 00:06:00,480
donc il faut y être préparé.

180
00:06:00,580 --> 00:06:02,917
Contrairement à ce qu'on pourrait penser

181
00:06:03,017 --> 00:06:04,866
quand je fais un task.cancel()

182
00:06:04,966 --> 00:06:06,570
je ne dis pas tout bêtement à la boucle

183
00:06:06,670 --> 00:06:08,001
de complètement ignorer ma tâche,

184
00:06:08,101 --> 00:06:09,693
c'est un petit peu plus sophistiqué que ça.

185
00:06:09,793 --> 00:06:12,852
La boucle va redonner la main à la tâche

186
00:06:12,952 --> 00:06:14,990
sauf que la prochaine fois

187
00:06:15,090 --> 00:06:16,646
où la tâche aura la main,

188
00:06:16,746 --> 00:06:17,839
on va lui envoyer une exception

189
00:06:17,939 --> 00:06:19,135
qui s'appelle CancelledError,

190
00:06:19,235 --> 00:06:20,635
donc vous êtes en charge

191
00:06:20,735 --> 00:06:22,771
d'attraper cette exception,

192
00:06:22,871 --> 00:06:24,184
vous pouvez même l'ignorer si vous voulez,

193
00:06:24,284 --> 00:06:25,215
ce n'est pas forcément

194
00:06:25,315 --> 00:06:26,256
une pratique recommandée, mais donc

195
00:06:26,356 --> 00:06:30,394
c'est pour vous indiquer le contexte général

196
00:06:30,494 --> 00:06:33,185
de cette manipulation d'annulation de tâche.

197
00:06:34,198 --> 00:06:36,688
En résumé, ce qu'on a vu dans cette vidéo,

198
00:06:36,788 --> 00:06:38,036
c'est qu'une boucle, c'est principalement

199
00:06:38,136 --> 00:06:39,130
un ensemble de tâches,

200
00:06:39,230 --> 00:06:41,253
alors, de manière plus précise

201
00:06:41,353 --> 00:06:43,005
on devrait dire un ensemble de futures.

202
00:06:43,666 --> 00:06:47,025
Une tâche, c'est un exemple particulier

203
00:06:47,125 --> 00:06:49,560
de future, c'est l'exemple de future

204
00:06:49,660 --> 00:06:50,826
qui va avec les coroutines.

205
00:06:50,926 --> 00:06:53,095
En tant qu'utilisateur on va dire normal

206
00:06:53,195 --> 00:06:56,586
de la librairie, c'est la chose à laquelle

207
00:06:56,686 --> 00:06:57,908
vous êtes le plus facilement exposés,

208
00:06:58,008 --> 00:06:58,665
ce sont les tâches,

209
00:06:58,765 --> 00:07:00,872
et les futures sont des abstractions

210
00:07:00,972 --> 00:07:01,971
dont on n'a pas besoin

211
00:07:02,071 --> 00:07:03,676
en tant qu'utilisateur de base.

212
00:07:04,650 --> 00:07:06,285
On a vu également qu'une tâche

213
00:07:06,385 --> 00:07:07,534
c'est principalement une pile

214
00:07:07,634 --> 00:07:08,451
donc de ce point de vue-là, ça ressemble

215
00:07:08,551 --> 00:07:10,421
à une espèce de thread applicatif ;

216
00:07:11,234 --> 00:07:12,768
ça mémorise un état,

217
00:07:12,868 --> 00:07:15,610
ça mémorise le résultat du traitement

218
00:07:15,710 --> 00:07:17,362
pour voir si ça s'est bien passé ou pas ;

219
00:07:17,462 --> 00:07:20,998
et, je vous rappelle surtout que c'est

220
00:07:21,098 --> 00:07:22,651
de la responsabilité de l'appelant

221
00:07:22,751 --> 00:07:23,826
ou de l'utilisateur, on va dire,

222
00:07:23,926 --> 00:07:28,159
d'aller explorer les différents objets tâches

223
00:07:28,259 --> 00:07:29,000
qui sont dans la boucle

224
00:07:30,185 --> 00:07:31,532
pour, en tout cas, vous assurer

225
00:07:31,632 --> 00:07:32,667
que vous allez lire les exceptions

226
00:07:32,767 --> 00:07:34,287
et si vous ne le faites pas, vous risquez

227
00:07:34,387 --> 00:07:36,139
d'obtenir un avertissement

228
00:07:36,239 --> 00:07:38,930
émis par le Garbage Collector.

229
00:07:39,945 --> 00:07:41,636
Simplement, il faut être conscient du fait

230
00:07:41,736 --> 00:07:43,604
que le Garbage Collector va probablement

231
00:07:43,704 --> 00:07:45,626
vous donner une information

232
00:07:45,726 --> 00:07:47,786
à un moment qui n'est pas le bon

233
00:07:47,886 --> 00:07:51,117
c'est-à-dire que c'est très difficile de savoir

234
00:07:51,217 --> 00:07:54,161
à quel moment on peut décider que

235
00:07:54,261 --> 00:07:55,320
quelque chose ne va pas.

236
00:07:56,479 --> 00:07:58,236
Vous n'avez pas encore lu l'exception

237
00:07:58,336 --> 00:08:00,260
de la tâche T, mais rien ne me dit que

238
00:08:00,360 --> 00:08:01,879
vous n'allez pas la lire dans un quart d'heure

239
00:08:01,979 --> 00:08:02,859
ou dans deux heures, donc

240
00:08:03,641 --> 00:08:05,660
le moment auquel on est capable

241
00:08:05,760 --> 00:08:06,795
de vous donner cet avertissement

242
00:08:07,266 --> 00:08:09,445
en règle générale, c'est toujours trop tard.

243
00:08:09,545 --> 00:08:11,824
Donc il est bien préférable d'avoir

244
00:08:11,924 --> 00:08:13,993
une bonne pratique de développement

245
00:08:16,759 --> 00:08:18,494
et dans cet esprit-là, je vous conseille

246
00:08:18,594 --> 00:08:21,109
d'aller systématiquement lire

247
00:08:21,209 --> 00:08:24,452
l'exception qui est liée aux objets tâches.

248
00:08:25,404 --> 00:08:26,185
À bientôt !

